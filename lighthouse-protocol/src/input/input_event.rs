use serde::{Deserialize, Serialize};

/// A user input event, as generated by the new frontend (LUNA).
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
#[serde(tag = "type", rename_all = "camelCase")]
pub enum InputEvent {
    Key(KeyEvent),
    Mouse(MouseEvent),
    Gamepad(GamepadEvent),
}

/// An identifier that is unique per client + device combo.
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
pub enum EventSource {
    String(String),
    Int(i32),
}

/// A keyboard event.
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
pub struct KeyEvent {
    /// The client identifier.
    pub source: EventSource,
    /// Whether the key was pressed.
    pub down: bool,
    /// The key pressed, see the docs on JS's `KeyboardEvent.key` for details.
    pub key: String, // TODO: Extract stronger `Key` type
}

/// A mouse button.
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
#[serde(rename_all = "camelCase")]
pub enum MouseButton {
    Left,
    Middle,
    Right,
    #[serde(untagged)]
    Unknown(String),
}

/// A mouse event.
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
pub struct MouseEvent {
    /// The client identifier.
    pub source: EventSource,
    /// The mouse button.
    pub button: MouseButton,
    // TODO: Add pos
}

/// A gamepad/controller event.
#[derive(Debug, Serialize, Deserialize, PartialEq, Eq, Clone)]
pub struct GamepadEvent {
    /// The client identifier. Also unique per gamepad.
    pub source: EventSource,
    // TODO: Add remaining
}
